name: CI/CD - Build & Deploy

on:
    push:
        branches:
            - main

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            # Checkout source code
            - name: Checkout
              uses: actions/checkout@v4

            # Login to Docker Hub
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Build & Push image
            - name: Build and Push Docker Image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/kirim-aja-backend:latest

            # Install sshpass
            - name: Install sshpass
              run: sudo apt-get update && sudo apt-get install -y sshpass

            # Deploy to VPS
            - name: Deploy to VPS
              run: |
                  sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
                    cd /home/mikamada17/tracking-expedition-be
                    docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
                    docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
                  EOF

            # Health Check after Deploy
            - name: Health Check
              run: |
                  echo "Checking service health..."
                  for i in {1..10}; do
                    STATUS=$(sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "docker ps --filter 'status=running' --filter 'name=tracking-expedition-be' --format '{{.Names}}'")
                    if [ "$STATUS" != "" ]; then
                      echo "✅ Service is running."
                      exit 0
                    fi
                    echo "Waiting for service to start... ($i/10)"
                    sleep 5
                  done
                  echo "❌ Service failed to start."
                  exit 1
